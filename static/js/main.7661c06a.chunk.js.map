{"version":3,"sources":["redux-setup/root-reducer.ts","redux-setup/action-types.ts","redux-setup/handlers.ts","movies/item.tsx","redux-setup/actions.ts","api.ts","constants.ts","movies/list.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initState","movies","Map","actionHandler","state","action","payload","targetMovie","get","isFav","set","useStyles","makeStyles","root","display","flexWrap","margin","expand","transform","expandOpen","Item","props","dispatch","useDispatch","title","overview","genres","posterPath","id","useState","expanded","setExpanded","classes","Card","CardMedia","style","height","image","CardHeader","titleTypographyProps","align","Divider","variant","CardContent","Box","className","map","genre","Chip","key","size","label","CardActions","disableSpacing","IconButton","onClick","type","changeStatusFavorite","color","Favorite","marginLeft","ExpandMore","Collapse","in","timeout","unmountOnExit","Typography","paragraph","allMovies","fetch","then","res","json","convertMovie","forEach","movie","newMovie","Object","entries","str","val","includes","replace","g","toUpperCase","convertInputMovie","value","List","useSelector","store","useEffect","api","getAllMovies","component","Grid","container","alignItems","spacing","values","item","xs","App","Container","maxWidth","Boolean","window","location","hostname","match","devTools","__REDUX_DEVTOOLS_EXTENSION__","a","createStore","reducer","has","compose","applyMiddleware","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7661c06a.chunk.js","sourcesContent":["import { FETCH_MOVIES, SET_FAV_MOVIE } from './action-types';\nimport { fetchMovies, changeFavoriteMovie } from './handlers';\n\nconst initState: RootStoreT = { movies: new Map() };\n\nconst actionHandler = new Map<string, any>([\n    [FETCH_MOVIES, fetchMovies],\n    [SET_FAV_MOVIE, changeFavoriteMovie],\n    ['DEFAULT', () => initState],\n]);\n\nexport function rootReducer(state = initState, action: Action<any>) {\n    const reducer = actionHandler.has(action.type) ? actionHandler.get(action.type) : actionHandler.get('DEFAULT');\n    return reducer(state, action);\n}\n","export const FETCH_MOVIES = '@@APP/ROOT/FETCH_MOVIES';\nexport const SET_FAV_MOVIE = '@@APP/ROOT/SET_FAV_MOVIE';\n","export const fetchMovies = (state: RootStoreT, action: { payload: MoviesT }) => {\r\n    return {\r\n        ...state,\r\n        movies: action.payload,\r\n    };\r\n};\r\n\r\nexport const changeFavoriteMovie = (state: RootStoreT, action: { payload: number }) => {\r\n    const movies = new Map(state.movies);\r\n    const targetMovie = movies.get(action.payload);\r\n    if (targetMovie) {\r\n        targetMovie.isFav = !targetMovie.isFav;\r\n        movies.set(action.payload, targetMovie);\r\n    }\r\n    return { ...state, movies };\r\n};\r\n","import React, { useState } from 'react';\nimport {\n    Card,\n    Typography,\n    CardContent,\n    CardActions,\n    Box,\n    CardMedia,\n    CardHeader,\n    Chip,\n    Divider,\n    IconButton,\n    makeStyles,\n    Collapse,\n} from '@material-ui/core';\n\nimport { Favorite as FavoriteIcon, ExpandMore as ExpandMoreIcon } from '@material-ui/icons';\nimport { useDispatch } from 'react-redux';\nimport { changeStatusFavorite } from '../redux-setup/actions';\n\n// TODO: разобраться со стилями и вынести жанры в отдельный компонент\nconst useStyles = makeStyles({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        '& > *': {\n            margin: '2px',\n        },\n    },\n    expand: {\n        transform: 'rotate(0deg)',\n    },\n    expandOpen: {\n        transform: 'rotate(180deg)',\n    },\n});\n\nexport const Item = (props: ItemPropsT) => {\n    const dispatch = useDispatch();\n\n    const { title, overview, genres, posterPath, id, isFav } = props;\n    const [expanded, setExpanded] = useState(false);\n\n    const onClickBtnExpand = () => {\n        setExpanded(!expanded);\n    };\n\n    const onClickBtnFavorite = () => {\n        dispatch(changeStatusFavorite(id));\n    };\n\n    // при выносе из компонента получаю ошибку Error: Invalid hook call.\n    const classes = useStyles();\n\n    return (\n        <Card>\n            <CardMedia style={{ height: '300px' }} image={`https://devlab.website/${posterPath}`} />\n            <CardHeader title={title} titleTypographyProps={{ align: 'center' }} />\n            <Divider variant='middle' />\n            <CardContent>\n                <Box className={classes.root}>\n                    {genres.map((genre: string) => {\n                        return <Chip variant='outlined' key={genre} size='small' label={genre} />;\n                    })}\n                </Box>\n            </CardContent>\n            <CardActions disableSpacing>\n                <IconButton onClick={onClickBtnFavorite} color={isFav ? 'secondary' : 'default'}>\n                    <FavoriteIcon />\n                </IconButton>\n                <IconButton\n                    className={expanded ? classes.expandOpen : classes.expand}\n                    onClick={onClickBtnExpand}\n                    style={{ marginLeft: 'auto' }}\n                >\n                    <ExpandMoreIcon />\n                </IconButton>\n            </CardActions>\n            <Collapse in={expanded} timeout='auto' unmountOnExit>\n                <CardContent>\n                    <Typography paragraph>Overview:</Typography>\n                    <Typography paragraph>{overview}</Typography>\n                </CardContent>\n            </Collapse>\n        </Card>\n    );\n};\n","import { FETCH_MOVIES, SET_FAV_MOVIE } from './action-types';\n\nexport const getAllMovies = (movies: Map<number, MovieT>) => ({ type: FETCH_MOVIES, payload: movies });\n\nexport const changeStatusFavorite = (id: number) => ({ type: SET_FAV_MOVIE, payload: id });\n","import { MOVIES_URL } from './constants';\n\nconst snakeToCamel = (str: string) => (str.includes('_') ? str.replace(/([-_]\\w)/g, g => g[1].toUpperCase()) : str);\n\nfunction convertInputMovie(movie: entranceMovieT): [number, {}] {\n    const newMovie: any = {};\n    Object.entries(movie).map(([key, val]) => (newMovie[snakeToCamel(key)] = val));\n    return [movie.id, newMovie];\n}\n\nexport const allMovies = (): Promise<any> =>\n    fetch(MOVIES_URL)\n        .then(res => res.json())\n        .then(movies => {\n            const convertMovie = new Map();\n            movies.forEach((movie: any) => {\n                const [id, value] = convertInputMovie(movie);\n                convertMovie.set(id, value);\n            });\n            return convertMovie;\n        });\n","export const MOVIES_URL:string = 'https://devlab.website/v1/movies';","import React, { useEffect } from 'react';\nimport { Item } from './item';\nimport { Typography, Grid } from '@material-ui/core';\nimport * as api from '../api';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { getAllMovies } from '../redux-setup';\n\nexport const List = () => {\n    const dispatch = useDispatch();\n\n    const allMovies = useSelector<RootStoreT, any>(store => store.movies);\n\n    useEffect(() => {\n        api.allMovies().then((movies: MoviesT) => {\n            dispatch(getAllMovies(movies));\n        });\n    }, []);\n\n    return (\n        <>\n            <Typography variant='h3' component='h1'>\n                Movies\n            </Typography>\n            <Grid container alignItems='stretch' spacing={3}>\n                {allMovies &&\n                    [...allMovies.values()].map((item: MovieT) => {\n                        return (\n                            <Grid item xs={4} key={item.id}>\n                                <Item {...item} />\n                            </Grid>\n                        );\n                    })}\n            </Grid>\n        </>\n    );\n};\n","import React from 'react';\nimport { List as Movies } from './movies/list';\n\nimport { Container } from '@material-ui/core';\n\nconst App: React.FC = () => {\n    return (\n        <div className='App'>\n            <Container maxWidth='md'>\n                <Movies />\n            </Container>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { applyMiddleware, createStore, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport { rootReducer } from './redux-setup/root-reducer';\nimport logger from 'redux-logger';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst devTools =\n    typeof (window as any).__REDUX_DEVTOOLS_EXTENSION__ === 'undefined'\n        ? (a: any) => a\n        : (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__();\n\nconst store = createStore(rootReducer, compose(applyMiddleware(logger), devTools));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}