{"version":3,"sources":["movies/selectors.ts","redux-setup/actions.ts","redux-setup/action-types.ts","api/constants.ts","movies/item.tsx","movies/list.tsx","components/footer.tsx","search-panel/selectors.ts","search-panel/search-panel.tsx","user-panel/user-panel.tsx","components/header.tsx","App.tsx","serviceWorker.ts","redux-setup/root-reducer.ts","redux-setup/handlers.ts","api/util.ts","api/movies.ts","api/user.ts","redux-setup/root-saga.ts","index.tsx"],"names":["selectDesiredMovies","createSelector","state","Array","from","movies","values","filter","it","isFav","list","undefined","search","genre","text","movie","genres","includes","title","reduce","acc","concat","id","Map","addSearch","value","type","payload","BASE_URL","TOKEN","MOVIES_URL","MOVIE_URL","USER_URL","useStyles","makeStyles","root","display","flexWrap","margin","expand","transform","expandOpen","Item","props","dispatch","useDispatch","overview","posterPath","isFavorite","useState","expanded","setExpanded","favoriteMovies","useSelector","user","likes","onClickBtnFavorite","currentStatus","toggleStatusFavorite","Boolean","classes","Card","CardMedia","style","height","image","CardHeader","titleTypographyProps","align","Divider","variant","CardContent","Box","className","map","Chip","key","size","label","CardActions","disableSpacing","IconButton","onClick","color","Favorite","marginLeft","ExpandMore","Collapse","in","timeout","unmountOnExit","Typography","paragraph","List","allMovies","component","Grid","container","alignItems","spacing","item","xs","sm","md","Footer","Container","maxWidth","marginTop","href","Date","getFullYear","selectGenres","Set","flat","SearchPanel","lastFiveSearch","store","last","setGenre","setText","FormControl","fullWidth","flexDirection","Select","onChange","evt","target","MenuItem","name","onBlur","Search","UserPanel","userName","login","anchorEl","setAnchorEl","handleClose","Button","aria-controls","aria-haspopup","currentTarget","AccountCircle","Menu","open","onClose","Header","Paper","Switch","inputProps","flexShrink","App","window","location","hostname","match","initState","actionHandler","action","console","log","targetMovie","get","set","idMovie","ind","indexOf","splice","allSearch","add","vals","delete","convertInputMovie","entranceMovie","newMovie","Object","entries","str","val","replace","g","toUpperCase","createRequest","url","method","data","fetch","body","JSON","stringify","headers","Authorization","then","response","json","apiMovies","load","res","addLike","Error","removeLike","apiUser","loadMovies","loadUserInfo","changeMoviesLikes","rootSaga","call","put","all","fork","takeLatest","sagaMiddleware","createSagaMiddleware","createStore","reducer","has","composeWithDevTools","applyMiddleware","logger","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.46e1142a.chunk.js","sourcesContent":["import { createSelector } from 'reselect';\r\n\r\nconst getFavMovies = (state: RootStoreT) => Array.from(state.movies.values()).filter((it: any) => it.isFav);\r\n\r\nconst getDesiredMovies = (state: RootStoreT): MoviesT => {\r\n    if (state.search === undefined) return state.movies;\r\n\r\n    const { genre, text } = state.search.values;\r\n\r\n    if (genre || text) {\r\n        const movies: any = Array.from(state.movies.values())\r\n            .filter((movie: any) => (genre === 'all' ? true : movie.genres.includes(genre)))\r\n            .filter((movie: any) => (text === '' ? true : movie.title.includes(text)))\r\n            .reduce((acc: any[], movie: MovieT) => acc.concat([[movie.id, movie]]), []);\r\n        return new Map(movies);\r\n    }\r\n\r\n    return state.movies;\r\n};\r\n\r\nexport const selectFavMovies = createSelector(getFavMovies, list => list);\r\nexport const selectDesiredMovies = createSelector(getDesiredMovies, list => list);\r\n","import {\r\n    MOUNT_MOVIES,\r\n    CHANGE_FAV_MOVIE_STATUS,\r\n    ADD_SEARCH,\r\n    SET_FAV_MOVIE_SAGA,\r\n    CHANGE_MOVES_USER,\r\n} from './action-types';\r\n\r\n// export const getAllMovies = (movies: Map<number, MovieT>) => ({ type: MOUNT_MOVIES, payload: movies });\r\n\r\nexport const toggleStatusFavorite = (id: number, currentStatus: Boolean) => ({\r\n    type: SET_FAV_MOVIE_SAGA,\r\n    payload: { id, currentStatus },\r\n});\r\n\r\n// export const changeMovieStatus = (id: number) => ({\r\n//     type: CHANGE_FAV_MOVIE_STATUS,\r\n//     payload: id,\r\n// });\r\n\r\nexport const addSearch = (value: {}) => ({ type: ADD_SEARCH, payload: value });\r\n","export const MOUNT_MOVIES = '@@APP/ROOT/PUT_MOVIES';\r\nexport const MOUNT_USER_DATA = '@@APP/ROOT/FETCH_USER';\r\n\r\nexport const CHANGE_FAV_MOVIE_STATUS = '@@APP/ROOT/CHANGE_FAV_MOVIE_STATUS';\r\n\r\nexport const ADD_SEARCH = '@@APP/ROOT/ADD_SEARCH';\r\n\r\n// user\r\nexport const CHANGE_MOVES_USER = '@@APP/ROOT/CHANGE_MOVES_USER';\r\n\r\n// saga\r\nexport const SET_FAV_MOVIE_SAGA = '@@APP/ROOT/SET_FAV_MOVIE_SAGA';\r\n","export const BASE_URL: string = 'https://devlab.website/';\r\n\r\nexport const USER: string = 'd_plotnikova';\r\nexport const TOKEN: string = 'ZF9wbG90bmlrb3ZhOllpTnNJbFRUckQ=';\r\n\r\nexport const MOVIES_URL: string = `${BASE_URL}v1/movies`;\r\nexport const MOVIE_URL: string = `${BASE_URL}v1/movie/`;\r\nexport const USER_URL: string = `${BASE_URL}v1/user/${USER}`;\r\n","import React, { useState } from 'react';\r\nimport {\r\n    Card,\r\n    Typography,\r\n    CardContent,\r\n    CardActions,\r\n    Box,\r\n    CardMedia,\r\n    CardHeader,\r\n    Chip,\r\n    Divider,\r\n    IconButton,\r\n    makeStyles,\r\n    Collapse,\r\n} from '@material-ui/core';\r\n\r\nimport { Favorite as FavoriteIcon, ExpandMore as ExpandMoreIcon } from '@material-ui/icons';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { toggleStatusFavorite } from '../redux-setup/actions';\r\nimport { BASE_URL } from '../api/constants';\r\n\r\n// TODO: разобраться со стилями и вынести жанры в отдельный компонент\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        '& > *': {\r\n            margin: '2px',\r\n        },\r\n    },\r\n    expand: {\r\n        transform: 'rotate(0deg)',\r\n    },\r\n    expandOpen: {\r\n        transform: 'rotate(180deg)',\r\n    },\r\n});\r\n\r\n// const favoriteMovies = useSelector((state: RootStoreT) => state.user.likes);\r\n\r\nexport const Item = (props: ItemPropsT) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const { title, overview, genres, posterPath, id, isFavorite } = props;\r\n    const [expanded, setExpanded] = useState(false);\r\n\r\n    const favoriteMovies = useSelector((state: RootStoreT) => state.user.likes);\r\n    const isFav = favoriteMovies && favoriteMovies.includes(id);\r\n\r\n    const onClickBtnExpand = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n    const onClickBtnFavorite = () => {\r\n        dispatch(toggleStatusFavorite(id, Boolean(isFav)));\r\n\r\n        // //  TODO: отправить запрос, дождаться ответа, обновить инфу о файле\r\n        // // ?: что будет с реселектом, на фильмы которые в избранном\r\n        // console.log('onClickBtnFavorite', id, likes);\r\n        // dispatch(changeStatusFavorite(id, Boolean(likes === 0)));\r\n    };\r\n\r\n    // при выносе из компонента получаю ошибку Error: Invalid hook call.\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card>\r\n            <CardMedia style={{ height: '400px' }} image={`${BASE_URL}${posterPath}`} />\r\n            <CardHeader title={title} titleTypographyProps={{ align: 'center' }} />\r\n            <Divider variant='middle' />\r\n            <CardContent>\r\n                <Box className={classes.root}>\r\n                    {genres.map((genre: string) => {\r\n                        return <Chip variant='outlined' key={genre} size='small' label={genre} />;\r\n                    })}\r\n                </Box>\r\n            </CardContent>\r\n            <CardActions disableSpacing>\r\n                <IconButton onClick={onClickBtnFavorite} color={isFavorite ? 'secondary' : 'default'}>\r\n                    <FavoriteIcon />\r\n                </IconButton>\r\n                <IconButton onClick={onClickBtnFavorite} color={isFav ? 'secondary' : 'default'}>\r\n                    <FavoriteIcon /> от user.likes\r\n                </IconButton>\r\n                <IconButton\r\n                    className={expanded ? classes.expandOpen : classes.expand}\r\n                    onClick={onClickBtnExpand}\r\n                    style={{ marginLeft: 'auto' }}\r\n                >\r\n                    <ExpandMoreIcon />\r\n                </IconButton>\r\n            </CardActions>\r\n            <Collapse in={expanded} timeout='auto' unmountOnExit>\r\n                <CardContent>\r\n                    <Typography paragraph>Overview:</Typography>\r\n                    <Typography paragraph>{overview}</Typography>\r\n                </CardContent>\r\n            </Collapse>\r\n        </Card>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Typography, Grid } from '@material-ui/core';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectDesiredMovies } from './selectors';\r\nimport { Item } from './item';\r\n\r\nexport const List = () => {\r\n    const allMovies = useSelector<RootStoreT, Map<number, MovieT>>(selectDesiredMovies);\r\n\r\n    return (\r\n        <>\r\n            <Typography variant='h3' component='h1'>\r\n                Movies\r\n            </Typography>\r\n            <Grid container alignItems='stretch' spacing={1}>\r\n                {allMovies &&\r\n                    Array.from(allMovies.values()).map((item: any) => {\r\n                        return (\r\n                            <Grid item xs={12} sm={6} md={4} key={item.id}>\r\n                                {/* TODO: исправить септку после стилизации под макет */}\r\n                                {/* <Grid item xs={6} sm={3} md={2} key={item.id}> */}\r\n                                <Item {...item} />\r\n                            </Grid>\r\n                        );\r\n                    })}\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Container, Grid, Divider, Box } from '@material-ui/core';\r\n\r\nexport const Footer = () => {\r\n    return (\r\n        <Container maxWidth='md' style={{ marginTop: '60px' }}>\r\n            <Divider variant='fullWidth' />\r\n            <Grid container spacing={1}>\r\n                <Box>\r\n                    <a href='/'>Privacy Policy</a>\r\n                    <p>© 2010-{new Date().getFullYear()} by Movier-plus.com, Inc.</p>\r\n                </Box>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n};\r\n","import { createSelector } from 'reselect';\r\n\r\nconst getGenres = (state: RootStoreT): Set<string> => {\r\n    const movies = Array.from(state.movies.values()).map((it: any) => it.genres);\r\n    const genres = new Set(movies.flat());\r\n    return genres;\r\n    // return  Array.from(genres.values());\r\n};\r\n\r\nexport const selectGenres = createSelector(getGenres, list => list);\r\n","import React, { useState } from 'react';\r\nimport { FormControl, Select, MenuItem } from '@material-ui/core';\r\nimport { Search as SearchIcon } from '@material-ui/icons';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addSearch } from '../redux-setup/actions';\r\n\r\nimport { selectGenres } from './selectors';\r\n\r\nexport const SearchPanel = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const genres = useSelector(selectGenres);\r\n    const lastFiveSearch = useSelector<RootStoreT, string[] | undefined>(store =>\r\n        store.search ? store.search.last : []\r\n    );\r\n\r\n    const [genre, setGenre] = useState<string>('all');\r\n    const [text, setText] = useState<string>('');\r\n\r\n    const handlerBlurSearch = (evt: React.ChangeEvent<{ value: string }>) => {\r\n        setText(evt.target.value);\r\n        dispatch(addSearch({ genre, text: evt.target.value }));\r\n    };\r\n\r\n    const handleChangeSelect = (evt: React.ChangeEvent<{ value: unknown }>) => {\r\n        setGenre(evt.target.value as string);\r\n        dispatch(addSearch({ genre: evt.target.value, text }));\r\n    };\r\n\r\n    return (\r\n        <FormControl fullWidth size={'small'} style={{ display: 'flex', flexDirection: 'row' }}>\r\n            {/* фильтры */}\r\n            <Select id='select' value={genre} onChange={handleChangeSelect}>\r\n                <MenuItem value={'all'}>All</MenuItem>\r\n                {genres.size !== 0 &&\r\n                    Array.from(genres).map((it: any) => {\r\n                        return (\r\n                            <MenuItem key={it} value={it}>\r\n                                {it}\r\n                            </MenuItem>\r\n                        );\r\n                    })}\r\n            </Select>\r\n            {/* поиск по тексту */}\r\n\r\n            {/*<SearchIcon />\r\n            <TextField id='outlined-basic' label='Search…' variant='outlined' size='small' /> */}\r\n\r\n            <input type='search' name='search' id='search' list='search-select' onBlur={handlerBlurSearch} />\r\n\r\n            <datalist id='search-select'>\r\n                {lastFiveSearch &&\r\n                    lastFiveSearch.map((it: string) => {\r\n                        return (\r\n                            <option key={it} value={it}>\r\n                                {it}\r\n                            </option>\r\n                        );\r\n                    })}\r\n            </datalist>\r\n            <SearchIcon />\r\n        </FormControl>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Button, Menu, MenuItem } from '@material-ui/core';\r\nimport { AccountCircle } from '@material-ui/icons';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const UserPanel = () => {\r\n    // TODO: WIP\r\n\r\n    const userName = useSelector<RootStoreT, Map<number, MovieT>>(store => store.user.login);\r\n\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n\r\n    const handleClick = (evt: React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorEl(evt.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button aria-controls='user-menu' aria-haspopup='true' onClick={handleClick}>\r\n                <AccountCircle />\r\n                {userName}\r\n            </Button>\r\n            <Menu id='user-menu' anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={handleClose}>\r\n                <MenuItem onClick={handleClose}>Profile</MenuItem>\r\n                <MenuItem onClick={handleClose}>Settings</MenuItem>\r\n                <MenuItem onClick={handleClose}>Logout</MenuItem>\r\n            </Menu>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Container, Grid, Paper, Typography, Box, Switch } from '@material-ui/core';\r\n\r\nimport { SearchPanel } from '../search-panel';\r\nimport { UserPanel } from '../user-panel';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <Paper>\r\n            <Container maxWidth='md'>\r\n                <Grid container spacing={1}>\r\n                    <Grid item>\r\n                        <span>Realise Calendar</span> | <span>My List</span> | <span>Coming soon</span>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography>\r\n                            <Switch value='checkedC' inputProps={{ 'aria-label': 'primary checkbox' }} />\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={2}>\r\n                        <Typography variant='h6'>>MOViER+</Typography>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Box flexShrink={1}>\r\n                            <SearchPanel></SearchPanel>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <UserPanel />\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </Paper>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Movies } from './movies';\r\n\r\nimport { Container } from '@material-ui/core';\r\nimport { Footer, Header } from './components';\r\n\r\nconst App: React.FC = () => {\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className='App'>\r\n                <Container maxWidth='md'>\r\n                    <Movies />\r\n                </Container>\r\n            </div>\r\n            <Footer />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n    MOUNT_MOVIES,\r\n    CHANGE_FAV_MOVIE_STATUS,\r\n    ADD_SEARCH,\r\n    MOUNT_USER_DATA,\r\n    SET_FAV_MOVIE_SAGA,\r\n    CHANGE_MOVES_USER,\r\n} from './action-types';\r\nimport { mountMovies, changeFavoriteMovie, addSearchValues, mountUserData, changeUsersMovies } from './handlers';\r\n\r\nconst initState: RootStoreT = {\r\n    movies: new Map(),\r\n    search: {\r\n        values: {\r\n            genre: '',\r\n            text: '',\r\n        },\r\n    },\r\n    user: {},\r\n};\r\n\r\nconst actionHandler = new Map<string, any>([\r\n    [MOUNT_MOVIES, mountMovies],\r\n    [CHANGE_FAV_MOVIE_STATUS, changeFavoriteMovie],\r\n    [CHANGE_MOVES_USER, changeUsersMovies],\r\n    [ADD_SEARCH, addSearchValues],\r\n    [MOUNT_USER_DATA, mountUserData],\r\n    [\r\n        'DEFAULT',\r\n        (state: RootStoreT) => {\r\n            console.log('reducer DEFAULT');\r\n            return { ...state };\r\n            // return initState;\r\n        },\r\n    ],\r\n]);\r\n\r\nexport function rootReducer(state = initState, action: Action<any>) {\r\n    console.log('rootReducer: action', action.type);\r\n    const reducer = actionHandler.has(action.type) ? actionHandler.get(action.type) : actionHandler.get('DEFAULT');\r\n    return reducer(state, action);\r\n}\r\n","export const mountMovies = (state: RootStoreT, action: { payload: MoviesT }) => {\r\n    return {\r\n        ...state,\r\n        movies: action.payload,\r\n    };\r\n};\r\n\r\n/*export const changeFavoriteMovie = (\r\n    state: RootStoreT,\r\n    action: {\r\n        payload: { id: number; currentStatus: boolean };\r\n    }\r\n) => {\r\n    // console.log('redux: payload', action);\r\n\r\n    const movies = new Map(state.movies);\r\n    const targetMovie = movies.get(action.payload.id);\r\n\r\n    // console.log('redux: changeFavoriteMovie', movies);\r\n    // console.log('redux: changeFavoriteMovie', targetMovie);\r\n    if (targetMovie) {\r\n        // targetMovie.likes = targetMovie.likes === 0 ? 1 : 0;\r\n        targetMovie.isFavorite = !targetMovie.isFavorite;\r\n        movies.set(action.payload.id, targetMovie);\r\n    }\r\n\r\n    return { ...state, movies };\r\n    \r\n    // const movies = new Map(state.movies);\r\n    // const targetMovie = movies.get(action.payload);\r\n    // if (targetMovie) {\r\n    //     targetMovie.isFavorite = !targetMovie.isFavorite;\r\n    //     movies.set(action.payload, targetMovie);\r\n    // }\r\n    // return { ...state, movies };\r\n};*/\r\n\r\nexport const changeFavoriteMovie = (state: RootStoreT, action: { payload: number }) => {\r\n    console.log('changeFavoriteMovie');\r\n    const movies = new Map(state.movies);\r\n    const targetMovie = movies.get(action.payload);\r\n\r\n    if (targetMovie) {\r\n        targetMovie.isFavorite = !targetMovie.isFavorite;\r\n        movies.set(action.payload, targetMovie);\r\n    }\r\n    console.log(targetMovie);\r\n\r\n    return { ...state, movies };\r\n};\r\n\r\nexport const changeUsersMovies = (state: RootStoreT, action: { payload: number }) => {\r\n    console.log('changeUsersMovies');\r\n    const idMovie: any = action.payload;\r\n    const user = state.user;\r\n    const movies: number[] = user.likes;\r\n    const ind = movies.indexOf(idMovie);\r\n\r\n    if (ind !== -1) {\r\n        user.likes = movies.splice(ind, 1);\r\n    }\r\n\r\n    return { ...state, user };\r\n};\r\n\r\nexport const addSearchValues = (state: RootStoreT, action: { payload: { genre: string; text: string } }) => {\r\n    const allSearch = new Set(state.search.last || []);\r\n\r\n    allSearch.add(action.payload.text);\r\n\r\n    if (allSearch.size >= 6) {\r\n        const vals: any = Array.from(allSearch.values());\r\n        allSearch.delete(vals[0]);\r\n    }\r\n\r\n    return {\r\n        ...state,\r\n        search: {\r\n            values: { genre: action.payload.genre, text: action.payload.text },\r\n            last: Array.from(allSearch.values()),\r\n        },\r\n    };\r\n};\r\n\r\nexport const mountUserData = (state: RootStoreT, action: { payload: {} }) => {\r\n    return {\r\n        ...state,\r\n        user: action.payload,\r\n    };\r\n};\r\n","import { TOKEN } from './constants';\r\n\r\nconst snakeToCamel = (str: string) => (str.includes('_') ? str.replace(/([-_]\\w)/g, g => g[1].toUpperCase()) : str);\r\n\r\nexport function convertInputMovie(entranceMovie: entranceMovieT): [number, {}] {\r\n    const newMovie: {} = Object.entries(entranceMovie).reduce(\r\n        (acc, [key, val]) => ({ ...acc, [snakeToCamel(key)]: val }),\r\n        {}\r\n    );\r\n    return [entranceMovie.id, newMovie];\r\n}\r\n\r\nexport const createRequest = (url: string, method = 'GET', data = undefined) => {\r\n    return fetch(url, {\r\n        method,\r\n        body: data ? JSON.stringify(data) : null,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Basic ${TOKEN}`,\r\n        },\r\n    }).then(response => response.json());\r\n};\r\n","import { MOVIES_URL, MOVIE_URL } from './constants';\r\nimport { createRequest, convertInputMovie } from './util';\r\n\r\nconst load = () =>\r\n    createRequest(MOVIES_URL).then(res => {\r\n        const movies = res.map(convertInputMovie);\r\n        return new Map(movies);\r\n    });\r\n\r\nconst addLike = (id: number) =>\r\n    createRequest(`${MOVIE_URL}${id}/like`, 'POST').then((res: { type: string }) => {\r\n        // console.log(res);\r\n\r\n        if (res.type === 'success') {\r\n            return res;\r\n        } else {\r\n            throw Error('err');\r\n        }\r\n    });\r\n\r\nconst removeLike = (id: number) =>\r\n    createRequest(`${MOVIE_URL}${id}/like`, 'DELETE').then((res: { type: string }) => {\r\n        // console.log(res);\r\n\r\n        if (res.type === 'success') {\r\n            return res;\r\n        } else {\r\n            throw Error('err');\r\n        }\r\n    });\r\n\r\nexport const apiMovies = {\r\n    load,\r\n    addLike,\r\n    removeLike,\r\n};\r\n","import { USER_URL } from './constants';\r\nimport { createRequest } from './util';\r\n\r\nexport const load = () =>\r\n    createRequest(USER_URL).then(res => {\r\n        // console.log('USER_URL', res);\r\n        return res;\r\n    });\r\n\r\nexport const apiUser = {\r\n    load,\r\n};\r\n","import { all, fork, put, call, takeEvery, takeLatest } from 'redux-saga/effects';\r\nimport {\r\n    MOUNT_MOVIES,\r\n    MOUNT_USER_DATA,\r\n    CHANGE_FAV_MOVIE_STATUS,\r\n    SET_FAV_MOVIE_SAGA,\r\n    CHANGE_MOVES_USER,\r\n} from './action-types';\r\nimport { apiMovies, apiUser } from '../api';\r\n\r\nfunction* loadMovies() {\r\n    const data = yield call(apiMovies.load);\r\n    yield put({\r\n        type: MOUNT_MOVIES,\r\n        payload: data,\r\n    });\r\n}\r\n\r\nfunction* loadUserInfo() {\r\n    const data = yield call(apiUser.load);\r\n    yield put({\r\n        type: MOUNT_USER_DATA,\r\n        payload: data,\r\n    });\r\n}\r\n\r\n/*function* changeMoviesLikes(action: any) {\r\n    const { id, currentStatus } = action.payload;\r\n    let a;\r\n    if (!currentStatus) {\r\n        a = () => apiMovies.addLike(id);\r\n    } else {\r\n        a = () => apiMovies.removeLike(id);\r\n    }\r\n    // const a = () => apiMovies.addLike(payload);\r\n    yield call(a);\r\n\r\n    if (response) {\r\n        yield put({\r\n            type: CHANGE_FAV_MOVIE_STATUS,\r\n            payload: id,\r\n        });\r\n    }\r\n}*/\r\n\r\nfunction* changeMoviesLikes(action: any) {\r\n    const { id, currentStatus } = action.payload;\r\n\r\n    console.log('SAGA-changeMoviesLikes', action);\r\n    const response = yield call(currentStatus ? apiMovies.removeLike : apiMovies.addLike, id);\r\n\r\n    if (response.type === 'success') {\r\n        yield put({\r\n            type: CHANGE_FAV_MOVIE_STATUS,\r\n            payload: id,\r\n        });\r\n        // TODO: добавлять их в список у юзера, (плюс переделать у самой карточки проверку избранного)\r\n        yield put({\r\n            type: CHANGE_MOVES_USER,\r\n            payload: id,\r\n        });\r\n    } else {\r\n        console.log('Ошибка в запросе');\r\n    }\r\n}\r\n\r\nexport function* rootSaga() {\r\n    yield all([fork(loadUserInfo), fork(loadMovies)]);\r\n    yield takeLatest(SET_FAV_MOVIE_SAGA, changeMoviesLikes);\r\n    // yield takeEvery(CHANGE_FAV_MOVIE_STATUS, changeMoviesLikes);\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { applyMiddleware, createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport logger from 'redux-logger';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { rootReducer } from './redux-setup/root-reducer';\r\nimport { rootSaga } from './redux-setup/root-saga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(logger, sagaMiddleware)));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}