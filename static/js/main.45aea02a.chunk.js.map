{"version":3,"sources":["movies/selectors.ts","redux-setup/actions.ts","redux-setup/action-types.ts","api/constants.ts","movies/item.tsx","movies/list.tsx","components/footer.tsx","search-panel/selectors.ts","search-panel/search-panel.tsx","user-panel/user-panel.tsx","components/header.tsx","App.tsx","serviceWorker.ts","redux-setup/root-reducer.ts","redux-setup/handlers.ts","api/util.ts","api/fetch-movies.ts","redux-setup/root-saga.ts","index.tsx"],"names":["selectDesiredMovies","createSelector","state","Array","from","movies","values","filter","it","isFav","list","undefined","search","genre","text","movie","genres","includes","title","reduce","acc","concat","id","Map","addSearch","value","type","payload","MOVIES_URL","useStyles","makeStyles","root","display","flexWrap","margin","expand","transform","expandOpen","Item","props","dispatch","useDispatch","overview","posterPath","isFavorite","useState","expanded","setExpanded","classes","Card","CardMedia","style","height","image","CardHeader","titleTypographyProps","align","Divider","variant","CardContent","Box","className","map","Chip","key","size","label","CardActions","disableSpacing","IconButton","onClick","changeStatusFavorite","color","Favorite","marginLeft","ExpandMore","Collapse","in","timeout","unmountOnExit","Typography","paragraph","List","allMovies","useSelector","component","Grid","container","alignItems","spacing","item","xs","sm","md","Footer","Container","maxWidth","marginTop","href","Date","getFullYear","selectGenres","Set","flat","SearchPanel","lastFiveSearch","store","last","setGenre","setText","FormControl","fullWidth","flexDirection","Select","onChange","evt","target","MenuItem","name","onBlur","Search","UserPanel","anchorEl","setAnchorEl","handleClose","Button","aria-controls","aria-haspopup","currentTarget","AccountCircle","Menu","open","Boolean","onClose","Header","Paper","Switch","inputProps","flexShrink","App","window","location","hostname","match","initState","actionHandler","action","targetMovie","get","set","allSearch","add","vals","delete","convertInputMovie","entranceMovie","newMovie","Object","entries","str","val","replace","g","toUpperCase","fetchMovies","fetch","then","res","json","appFetchSaga","rootSaga","call","data","put","all","fork","sagaMiddleware","createSagaMiddleware","createStore","reducer","has","composeWithDevTools","applyMiddleware","logger","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.45aea02a.chunk.js","sourcesContent":["import { createSelector } from 'reselect';\r\n\r\nconst getFavMovies = (state: RootStoreT) => Array.from(state.movies.values()).filter((it: any) => it.isFav);\r\n\r\nconst getDesiredMovies = (state: RootStoreT): MoviesT => {\r\n    if (state.search === undefined) return state.movies;\r\n\r\n    const { genre, text } = state.search.values;\r\n\r\n    if (genre || text) {\r\n        const movies: any = Array.from(state.movies.values())\r\n            .filter((movie: any) => (genre === 'all' ? true : movie.genres.includes(genre)))\r\n            .filter((movie: any) => (text === '' ? true : movie.title.includes(text)))\r\n            .reduce((acc: any[], movie: MovieT) => acc.concat([[movie.id, movie]]), []);\r\n        return new Map(movies);\r\n    }\r\n\r\n    return state.movies;\r\n};\r\n\r\nexport const selectFavMovies = createSelector(getFavMovies, list => list);\r\nexport const selectDesiredMovies = createSelector(getDesiredMovies, list => list);\r\n","import { FETCH_MOVIES, SET_FAV_MOVIE, ADD_SEARCH } from './action-types';\r\n\r\nexport const getAllMovies = (movies: Map<number, MovieT>) => ({ type: FETCH_MOVIES, payload: movies });\r\n\r\nexport const changeStatusFavorite = (id: number) => ({ type: SET_FAV_MOVIE, payload: id });\r\n\r\nexport const addSearch = (value: {}) => ({ type: ADD_SEARCH, payload: value });\r\n","export const FETCH_MOVIES = '@@APP/ROOT/FETCH_MOVIES';\r\nexport const SET_FAV_MOVIE = '@@APP/ROOT/SET_FAV_MOVIE';\r\nexport const ADD_SEARCH = '@@APP/ROOT/ADD_SEARCH';\r\n","export const BASE_URL: string = 'https://devlab.website/';\r\nexport const MOVIES_URL: string = `${BASE_URL}v1/movies`;\r\n","import React, { useState } from 'react';\r\nimport {\r\n    Card,\r\n    Typography,\r\n    CardContent,\r\n    CardActions,\r\n    Box,\r\n    CardMedia,\r\n    CardHeader,\r\n    Chip,\r\n    Divider,\r\n    IconButton,\r\n    makeStyles,\r\n    Collapse,\r\n} from '@material-ui/core';\r\n\r\nimport { Favorite as FavoriteIcon, ExpandMore as ExpandMoreIcon } from '@material-ui/icons';\r\nimport { useDispatch } from 'react-redux';\r\nimport { changeStatusFavorite } from '../redux-setup/actions';\r\nimport { BASE_URL } from '../api/constants';\r\n\r\n// TODO: разобраться со стилями и вынести жанры в отдельный компонент\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        '& > *': {\r\n            margin: '2px',\r\n        },\r\n    },\r\n    expand: {\r\n        transform: 'rotate(0deg)',\r\n    },\r\n    expandOpen: {\r\n        transform: 'rotate(180deg)',\r\n    },\r\n});\r\n\r\nexport const Item = (props: ItemPropsT) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const { title, overview, genres, posterPath, id, isFavorite } = props;\r\n    const [expanded, setExpanded] = useState(false);\r\n\r\n    const onClickBtnExpand = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n    const onClickBtnFavorite = () => {\r\n        dispatch(changeStatusFavorite(id));\r\n    };\r\n\r\n    // при выносе из компонента получаю ошибку Error: Invalid hook call.\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card>\r\n            <CardMedia style={{ height: '400px' }} image={`${BASE_URL}${posterPath}`} />\r\n            <CardHeader title={title} titleTypographyProps={{ align: 'center' }} />\r\n            <Divider variant='middle' />\r\n            <CardContent>\r\n                <Box className={classes.root}>\r\n                    {genres.map((genre: string) => {\r\n                        return <Chip variant='outlined' key={genre} size='small' label={genre} />;\r\n                    })}\r\n                </Box>\r\n            </CardContent>\r\n            <CardActions disableSpacing>\r\n                <IconButton onClick={onClickBtnFavorite} color={isFavorite ? 'secondary' : 'default'}>\r\n                    <FavoriteIcon />\r\n                </IconButton>\r\n                <IconButton\r\n                    className={expanded ? classes.expandOpen : classes.expand}\r\n                    onClick={onClickBtnExpand}\r\n                    style={{ marginLeft: 'auto' }}\r\n                >\r\n                    <ExpandMoreIcon />\r\n                </IconButton>\r\n            </CardActions>\r\n            <Collapse in={expanded} timeout='auto' unmountOnExit>\r\n                <CardContent>\r\n                    <Typography paragraph>Overview:</Typography>\r\n                    <Typography paragraph>{overview}</Typography>\r\n                </CardContent>\r\n            </Collapse>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { Typography, Grid } from '@material-ui/core';\r\nimport { fetchMovies } from '../api';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// import { getAllMovies } from '../redux-setup';\r\nimport { selectDesiredMovies } from './selectors';\r\n\r\nimport { Item } from './item';\r\n\r\nexport const List = () => {\r\n    // const dispatch = useDispatch();\r\n\r\n    // const allMovies = useSelector<RootStoreT, Map<number, MovieT>>(store => store.movies);\r\n    const allMovies = useSelector<RootStoreT, Map<number, MovieT>>(selectDesiredMovies);\r\n\r\n    // useEffect(() => {\r\n    //     fetchMovies().then((movies: MoviesT) => {\r\n    //         dispatch(getAllMovies(movies));\r\n    //     });\r\n    // }, [dispatch]);\r\n\r\n    return (\r\n        <>\r\n            <Typography variant='h3' component='h1'>\r\n                Movies\r\n            </Typography>\r\n            <Grid container alignItems='stretch' spacing={1}>\r\n                {allMovies &&\r\n                    Array.from(allMovies.values()).map((item: any) => {\r\n                        return (\r\n                            <Grid item xs={12} sm={6} md={4} key={item.id}>\r\n                                {/* TODO: исправить септку после стилизации под макет */}\r\n                                {/* <Grid item xs={6} sm={3} md={2} key={item.id}> */}\r\n                                <Item {...item} />\r\n                            </Grid>\r\n                        );\r\n                    })}\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Container, Grid, Divider, Box } from '@material-ui/core';\r\n\r\nexport const Footer = () => {\r\n    return (\r\n        <Container maxWidth='md' style={{ marginTop: '60px' }}>\r\n            <Divider variant='fullWidth' />\r\n            <Grid container spacing={1}>\r\n                <Box>\r\n                    <a href='/'>Privacy Policy</a>\r\n                    <p>© 2010-{new Date().getFullYear()} by Movier-plus.com, Inc.</p>\r\n                </Box>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n};\r\n","import { createSelector } from 'reselect';\r\n\r\nconst getGenres = (state: RootStoreT): Set<string> => {\r\n    const movies = Array.from(state.movies.values()).map((it: any) => it.genres);\r\n    const genres = new Set(movies.flat());\r\n    return genres;\r\n};\r\n\r\nexport const selectGenres = createSelector(getGenres, list => list);\r\n","import React, { useState } from 'react';\r\nimport { FormControl, Select, MenuItem } from '@material-ui/core';\r\nimport { Search as SearchIcon } from '@material-ui/icons';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addSearch } from '../redux-setup/actions';\r\n\r\nimport { selectGenres } from './selectors';\r\n\r\nexport const SearchPanel = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const genres = useSelector(selectGenres);\r\n    const lastFiveSearch = useSelector<RootStoreT, string[] | undefined>(store =>\r\n        store.search ? store.search.last : []\r\n    );\r\n\r\n    const [genre, setGenre] = useState<string>('all');\r\n    const [text, setText] = useState<string>('');\r\n\r\n    const handlerBlurSearch = (evt: React.ChangeEvent<{ value: string }>) => {\r\n        setText(evt.target.value);\r\n        dispatch(addSearch({ genre, text: evt.target.value }));\r\n    };\r\n\r\n    const handleChangeSelect = (evt: React.ChangeEvent<{ value: unknown }>) => {\r\n        setGenre(evt.target.value as string);\r\n        dispatch(addSearch({ genre: evt.target.value, text }));\r\n    };\r\n\r\n    return (\r\n        <FormControl fullWidth size={'small'} style={{ display: 'flex', flexDirection: 'row' }}>\r\n            {/* фильтры */}\r\n            <Select id='select' value={genre} onChange={handleChangeSelect}>\r\n                <MenuItem value={'all'}>All</MenuItem>\r\n                {genres.size !== 0 &&\r\n                    Array.from(genres).map((it: any) => {\r\n                        return (\r\n                            <MenuItem key={it} value={it}>\r\n                                {it}\r\n                            </MenuItem>\r\n                        );\r\n                    })}\r\n            </Select>\r\n            {/* поиск по тексту */}\r\n\r\n            {/*<SearchIcon />\r\n            <TextField id='outlined-basic' label='Search…' variant='outlined' size='small' /> */}\r\n\r\n            <input type='search' name='search' id='search' list='search-select' onBlur={handlerBlurSearch} />\r\n\r\n            <datalist id='search-select'>\r\n                {lastFiveSearch &&\r\n                    lastFiveSearch.map((it: string) => {\r\n                        return (\r\n                            <option key={it} value={it}>\r\n                                {it}\r\n                            </option>\r\n                        );\r\n                    })}\r\n            </datalist>\r\n            <SearchIcon />\r\n        </FormControl>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Button, Menu, MenuItem } from '@material-ui/core';\r\nimport { AccountCircle } from '@material-ui/icons';\r\n\r\nexport const UserPanel = () => {\r\n    // TODO: WIP\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n\r\n    const handleClick = (evt: React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorEl(evt.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button aria-controls='user-menu' aria-haspopup='true' onClick={handleClick}>\r\n                <AccountCircle />\r\n                Vasya21\r\n            </Button>\r\n            <Menu id='user-menu' anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={handleClose}>\r\n                <MenuItem onClick={handleClose}>Profile</MenuItem>\r\n                <MenuItem onClick={handleClose}>Settings</MenuItem>\r\n                <MenuItem onClick={handleClose}>Logout</MenuItem>\r\n            </Menu>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Container, Grid, Paper, Typography, Box, Switch } from '@material-ui/core';\r\n\r\nimport { SearchPanel } from '../search-panel';\r\nimport { UserPanel } from '../user-panel';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <Paper>\r\n            <Container maxWidth='md'>\r\n                <Grid container spacing={1}>\r\n                    <Grid item>\r\n                        <span>Realise Calendar</span> | <span>My List</span> | <span>Coming soon</span>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography>\r\n                            <Switch value='checkedC' inputProps={{ 'aria-label': 'primary checkbox' }} />\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={2}>\r\n                        <Typography variant='h6'>>MOViER+</Typography>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Box flexShrink={1}>\r\n                            <SearchPanel></SearchPanel>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <UserPanel />\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </Paper>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Movies } from './movies';\r\n\r\nimport { Container } from '@material-ui/core';\r\nimport { Footer, Header } from './components';\r\n\r\nconst App: React.FC = () => {\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className='App'>\r\n                <Container maxWidth='md'>\r\n                    <Movies />\r\n                </Container>\r\n            </div>\r\n            <Footer />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { FETCH_MOVIES, SET_FAV_MOVIE, ADD_SEARCH } from './action-types';\r\nimport { fetchMovies, changeFavoriteMovie, addSearchValues } from './handlers';\r\n\r\nconst initState: RootStoreT = { movies: new Map(), search: { values: { genre: '', text: '' } } };\r\n\r\nconst actionHandler = new Map<string, any>([\r\n    [FETCH_MOVIES, fetchMovies],\r\n    [SET_FAV_MOVIE, changeFavoriteMovie],\r\n    [ADD_SEARCH, addSearchValues],\r\n    ['DEFAULT', () => initState],\r\n]);\r\n\r\nexport function rootReducer(state = initState, action: Action<any>) {\r\n    const reducer = actionHandler.has(action.type) ? actionHandler.get(action.type) : actionHandler.get('DEFAULT');\r\n    return reducer(state, action);\r\n}\r\n","export const fetchMovies = (state: RootStoreT, action: { payload: MoviesT }) => {\r\n    return {\r\n        ...state,\r\n        movies: action.payload,\r\n    };\r\n};\r\n\r\nexport const changeFavoriteMovie = (state: RootStoreT, action: { payload: number }) => {\r\n    const movies = new Map(state.movies);\r\n    const targetMovie = movies.get(action.payload);\r\n    if (targetMovie) {\r\n        targetMovie.isFavorite = !targetMovie.isFavorite;\r\n        movies.set(action.payload, targetMovie);\r\n    }\r\n    return { ...state, movies };\r\n};\r\n\r\nexport const addSearchValues = (state: RootStoreT, action: { payload: { genre: string; text: string } }) => {\r\n    const allSearch = new Set(state.search.last || []);\r\n\r\n    allSearch.add(action.payload.text);\r\n\r\n    if (allSearch.size >= 6) {\r\n        const vals: any = Array.from(allSearch.values());\r\n        allSearch.delete(vals[0]);\r\n    }\r\n\r\n    return {\r\n        ...state,\r\n        search: {\r\n            values: { genre: action.payload.genre, text: action.payload.text },\r\n            last: Array.from(allSearch.values()),\r\n        },\r\n    };\r\n};\r\n","const snakeToCamel = (str: string) => (str.includes('_') ? str.replace(/([-_]\\w)/g, g => g[1].toUpperCase()) : str);\r\n\r\nexport function convertInputMovie(entranceMovie: entranceMovieT): [number, {}] {\r\n    const newMovie: {} = Object.entries(entranceMovie).reduce(\r\n        (acc, [key, val]) => ({ ...acc, [snakeToCamel(key)]: val }),\r\n        {}\r\n    );\r\n    return [entranceMovie.id, newMovie];\r\n}\r\n","import { MOVIES_URL } from './constants';\r\nimport { convertInputMovie } from './util';\r\n\r\nexport const fetchMovies = (): Promise<Map<number, MovieT>> =>\r\n    fetch(MOVIES_URL)\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            const movies = res.map(convertInputMovie);\r\n            return new Map(movies);\r\n        });\r\n","import { all, fork, put, takeLatest, call, delay } from 'redux-saga/effects';\r\nimport { fetchMovies } from '../api';\r\nimport { FETCH_MOVIES } from './action-types';\r\n\r\nfunction* appFetchSaga() {\r\n    const data = yield call(fetchMovies);\r\n    yield put({\r\n        type: FETCH_MOVIES,\r\n        payload: data,\r\n    });\r\n}\r\n\r\nexport function* rootSaga() {\r\n    yield all([fork(appFetchSaga)]);\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { applyMiddleware, createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport logger from 'redux-logger';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { rootReducer } from './redux-setup/root-reducer';\r\nimport { rootSaga } from './redux-setup/root-saga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(logger, sagaMiddleware)));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}