{"version":3,"sources":["components/footer.tsx","redux-setup/actions.ts","redux-setup/action-types.ts","search-panel/selectors.ts","search-panel/search-panel.tsx","user-panel/user-panel.tsx","components/header.tsx","movies/selectors.ts","api/constants.ts","movies/item.tsx","movies/list.tsx","redux-setup/root-reducer.ts","redux-setup/handlers.ts","movie/page.tsx","user-page/edit.tsx","user-page/user.tsx","App.tsx","serviceWorker.ts","api/util.ts","api/movies.ts","api/user.ts","redux-setup/root-saga.ts","index.tsx"],"names":["Footer","Container","maxWidth","style","marginTop","Divider","variant","Grid","container","spacing","Box","href","Date","getFullYear","toggleStatusFavorite","id","currentStatus","type","payload","addSearch","value","selectGenres","createSelector","state","movies","Array","from","values","map","it","genres","Set","flat","list","SearchPanel","dispatch","useDispatch","useSelector","lastFiveSearch","store","search","last","useState","genre","setGenre","text","setText","FormControl","fullWidth","size","display","flexDirection","Select","onChange","evt","target","MenuItem","key","name","onBlur","Search","UserPanel","userName","user","login","anchorEl","setAnchorEl","handleClose","Button","aria-controls","aria-haspopup","onClick","currentTarget","AccountCircle","Menu","open","Boolean","onClose","to","Header","Paper","item","Typography","Switch","inputProps","xs","flexShrink","selectDesiredMovies","filter","isFav","undefined","movie","includes","title","reduce","acc","concat","Map","userFavoriteMovies","likes","userFavoriteMoviesId","length","BASE_URL","TOKEN","MOVIES_URL","MOVIE_URL","USER_URL","Item","props","disabledBtn","setDisabledBtn","posterPath","isFavorite","useEffect","Card","CardMedia","height","image","CardActions","disableSpacing","IconButton","color","disabled","Favorite","List","allMovies","favoriteMovies","alignItems","sm","md","initState","actionHandler","action","targetMovie","get","set","idMovie","indexMovie","indexOf","splice","push","allSearch","add","vals","delete","console","warn","Page","overview","voteAverage","voteCount","src","width","alt","component","startIcon","Edit","UserPage","useRouteMatch","path","url","exact","endIcon","RouterLink","App","className","children","match","Number","params","has","window","location","hostname","convertInputMovie","entranceMovie","newMovie","Object","entries","str","val","replace","g","toUpperCase","unicGenres","createRequest","method","data","fetch","body","JSON","stringify","headers","Authorization","then","response","json","Error","apiMovies","load","res","addLike","removeLike","apiUser","loadMovies","loadUserInfo","changeMoviesLikes","rootSaga","call","put","all","fork","takeEvery","sagaMiddleware","createSagaMiddleware","createStore","reducer","composeWithDevTools","applyMiddleware","logger","run","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1500bde0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { Container, Grid, Divider, Box } from '@material-ui/core';\r\n\r\nexport const Footer = () => {\r\n    return (\r\n        <Container maxWidth='md' style={{ marginTop: '60px' }}>\r\n            <Divider variant='fullWidth' />\r\n            <Grid container spacing={1}>\r\n                <Box>\r\n                    <a href='/'>Privacy Policy</a>\r\n                    <p>© 2010-{new Date().getFullYear()} by Movier-plus.com, Inc.</p>\r\n                </Box>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n};\r\n","import { ADD_SEARCH, SET_FAV_MOVIE_SAGA } from './action-types';\r\n\r\nexport const toggleStatusFavorite = (id: number, currentStatus: Boolean) => ({\r\n    type: SET_FAV_MOVIE_SAGA,\r\n    payload: { id, currentStatus },\r\n});\r\n\r\nexport const addSearch = (value: {}) => ({ type: ADD_SEARCH, payload: value });\r\n","export const MOUNT_MOVIES = '@@APP/ROOT/PUT_MOVIES';\r\nexport const MOUNT_USER_DATA = '@@APP/ROOT/FETCH_USER';\r\n\r\nexport const CHANGE_FAV_MOVIE_STATUS = '@@APP/ROOT/CHANGE_FAV_MOVIE_STATUS';\r\n\r\nexport const ADD_SEARCH = '@@APP/ROOT/ADD_SEARCH';\r\n\r\n// user\r\nexport const CHANGE_MOVES_USER = '@@APP/ROOT/CHANGE_MOVES_USER';\r\n\r\n// saga\r\nexport const SET_FAV_MOVIE_SAGA = '@@APP/ROOT/SET_FAV_MOVIE_SAGA';\r\n","import { createSelector } from 'reselect';\r\n\r\nconst getGenres = (state: RootStoreT): Set<string> => {\r\n    const movies = Array.from(state.movies.values()).map((it: any) => it.genres);\r\n    const genres = new Set(movies.flat());\r\n    return genres;\r\n};\r\n\r\nexport const selectGenres = createSelector(getGenres, list => list);\r\n","import React, { useState } from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addSearch } from '../redux-setup/actions';\r\nimport { selectGenres } from './selectors';\r\n\r\nimport { FormControl, Select, MenuItem } from '@material-ui/core';\r\nimport { Search as SearchIcon } from '@material-ui/icons';\r\n\r\nexport const SearchPanel = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const genres = useSelector(selectGenres);\r\n    const lastFiveSearch = useSelector<RootStoreT, string[] | undefined>(store =>\r\n        store.search ? store.search.last : []\r\n    );\r\n\r\n    const [genre, setGenre] = useState<string>('all');\r\n    const [text, setText] = useState<string>('');\r\n\r\n    const handlerBlurSearch = (evt: React.ChangeEvent<{ value: string }>) => {\r\n        setText(evt.target.value);\r\n        dispatch(addSearch({ genre, text: evt.target.value }));\r\n    };\r\n\r\n    const handleChangeSelect = (evt: React.ChangeEvent<{ value: unknown }>) => {\r\n        setGenre(evt.target.value as string);\r\n        dispatch(addSearch({ genre: evt.target.value, text }));\r\n    };\r\n\r\n    return (\r\n        <FormControl fullWidth size={'small'} style={{ display: 'flex', flexDirection: 'row' }}>\r\n            {/* фильтры */}\r\n            <Select id='select' value={genre} onChange={handleChangeSelect}>\r\n                <MenuItem value={'all'}>All</MenuItem>\r\n                {genres.size !== 0 &&\r\n                    Array.from(genres).map((it: any) => {\r\n                        return (\r\n                            <MenuItem key={it} value={it}>\r\n                                {it}\r\n                            </MenuItem>\r\n                        );\r\n                    })}\r\n            </Select>\r\n            {/* поиск по тексту */}\r\n\r\n            <input type='search' name='search' id='search' list='search-select' onBlur={handlerBlurSearch} />\r\n\r\n            <datalist id='search-select'>\r\n                {lastFiveSearch &&\r\n                    lastFiveSearch.map((it: string) => {\r\n                        return (\r\n                            <option key={it} value={it}>\r\n                                {it}\r\n                            </option>\r\n                        );\r\n                    })}\r\n            </datalist>\r\n            <SearchIcon />\r\n        </FormControl>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Button, Menu, MenuItem } from '@material-ui/core';\r\nimport { AccountCircle } from '@material-ui/icons';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const UserPanel = () => {\r\n    // TODO: WIP\r\n\r\n    const userName = useSelector<RootStoreT, Map<number, MovieT>>(store => store.user.login);\r\n\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n\r\n    const handleClick = (evt: React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorEl(evt.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button aria-controls='user-menu' aria-haspopup='true' onClick={handleClick}>\r\n                <AccountCircle />\r\n                {userName}\r\n            </Button>\r\n            <Menu id='user-menu' anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={handleClose}>\r\n                {/* <MenuItem onClick={handleClose}>Profile</MenuItem> */}\r\n                <Link to='/user'>\r\n                    <MenuItem onClick={handleClose}>Profile</MenuItem>\r\n                </Link>\r\n                <MenuItem onClick={handleClose}>My list</MenuItem>\r\n                <MenuItem onClick={handleClose}>Log out</MenuItem>\r\n            </Menu>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { SearchPanel } from '../search-panel';\r\nimport { UserPanel } from '../user-panel';\r\n\r\nimport { Container, Grid, Paper, Typography, Box, Switch } from '@material-ui/core';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <Paper>\r\n            <Container maxWidth='md'>\r\n                <Grid container spacing={1}>\r\n                    <Grid item>\r\n                        <span>Realise Calendar</span> | <span>My List</span> | <span>Coming soon</span>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography>\r\n                            <Switch value='checkedC' inputProps={{ 'aria-label': 'primary checkbox' }} />\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={2}>\r\n                        <Typography variant='h6'>\r\n                            <Link to='/'>>MOViER+</Link>\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Box flexShrink={1}>\r\n                            <SearchPanel></SearchPanel>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <UserPanel />\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </Paper>\r\n    );\r\n};\r\n","import { createSelector } from 'reselect';\r\n\r\nconst getFavMovies = (state: RootStoreT) => Array.from(state.movies.values()).filter((it: any) => it.isFav);\r\n\r\nconst getDesiredMovies = (state: RootStoreT): MoviesT => {\r\n    if (state.search === undefined) return state.movies;\r\n\r\n    const { genre, text } = state.search.values;\r\n\r\n    if (genre || text) {\r\n        const movies: any = Array.from(state.movies.values())\r\n            .filter((movie: any) => (genre === 'all' ? true : movie.genres.includes(genre)))\r\n            .filter((movie: any) => (text === '' ? true : movie.title.includes(text)))\r\n            .reduce((acc: any[], movie: MovieT) => acc.concat([[movie.id, movie]]), []);\r\n        return new Map(movies);\r\n    }\r\n\r\n    return state.movies;\r\n};\r\n\r\nconst getUserFavoriteMovies = (state: RootStoreT): MoviesT => {\r\n    if (state.user.likes === undefined) return new Map();\r\n\r\n    const userFavoriteMoviesId = Array.from(state.user.likes);\r\n    if (userFavoriteMoviesId.length !== 0) {\r\n        const movies: any = Array.from(state.movies.values())\r\n            .filter((movie: any) => userFavoriteMoviesId.includes(movie.id))\r\n            .reduce((acc: any[], movie: MovieT) => acc.concat([[movie.id, movie]]), []);\r\n        return new Map(movies);\r\n    }\r\n\r\n    return new Map();\r\n};\r\n\r\nexport const selectFavMovies = createSelector(getFavMovies, list => list);\r\nexport const selectDesiredMovies = createSelector(getDesiredMovies, list => list);\r\nexport const userFavoriteMovies = createSelector(getUserFavoriteMovies, list => list);\r\n","export const BASE_URL: string = 'https://devlab.website/';\r\n\r\nexport const USER: string = 'd_plotnikova';\r\nexport const TOKEN: string = 'ZF9wbG90bmlrb3ZhOllpTnNJbFRUckQ=';\r\n\r\nexport const MOVIES_URL: string = `${BASE_URL}v1/movies`;\r\nexport const MOVIE_URL: string = `${BASE_URL}v1/movie/`;\r\nexport const USER_URL: string = `${BASE_URL}v1/user/${USER}`;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { toggleStatusFavorite } from '../redux-setup/actions';\r\n\r\nimport { BASE_URL } from '../api/constants';\r\n\r\nimport { Card, CardActions, CardMedia, Divider, IconButton } from '@material-ui/core';\r\nimport { Favorite as FavoriteIcon } from '@material-ui/icons';\r\n\r\nexport const Item = (props: ItemPropsT) => {\r\n    const dispatch = useDispatch();\r\n    const [disabledBtn, setDisabledBtn] = useState(false);\r\n    const { posterPath, id, isFavorite } = props;\r\n\r\n    const onClickBtnFavorite = () => {\r\n        setDisabledBtn(true);\r\n        dispatch(toggleStatusFavorite(id, Boolean(isFavorite)));\r\n    };\r\n\r\n    useEffect(() => {\r\n        setDisabledBtn(false);\r\n    }, [isFavorite]);\r\n\r\n    return (\r\n        <Card>\r\n            <CardMedia style={{ height: '250px' }} image={`${BASE_URL}${posterPath}`} />\r\n            <Divider variant='middle' />\r\n            <CardActions disableSpacing>\r\n                <Link to={`/movie/${id}`}>More info</Link>\r\n                <IconButton\r\n                    onClick={onClickBtnFavorite}\r\n                    color={isFavorite ? 'secondary' : 'default'}\r\n                    disabled={disabledBtn}\r\n                >\r\n                    <FavoriteIcon />\r\n                </IconButton>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\nimport { useSelector } from 'react-redux';\r\nimport { selectDesiredMovies } from './selectors';\r\n\r\nimport { Grid } from '@material-ui/core';\r\n\r\nimport { Item } from './item';\r\n\r\nexport const List = () => {\r\n    const allMovies = useSelector<RootStoreT, Map<number, MovieT>>(selectDesiredMovies);\r\n    const favoriteMovies = useSelector((state: RootStoreT) => state.user.likes);\r\n\r\n    return (\r\n        <Grid container alignItems='stretch' spacing={1}>\r\n            {allMovies &&\r\n                Array.from(allMovies.values()).map((item: any) => (\r\n                    <Grid item xs={6} sm={3} md={2} key={item.id}>\r\n                        <Item {...item} isFavorite={favoriteMovies && favoriteMovies.includes(item.id)} />\r\n                    </Grid>\r\n                ))}\r\n        </Grid>\r\n    );\r\n};\r\n","import { MOUNT_MOVIES, CHANGE_FAV_MOVIE_STATUS, ADD_SEARCH, MOUNT_USER_DATA, CHANGE_MOVES_USER } from './action-types';\r\nimport { mountMovies, changeFavoriteMovie, addSearchValues, mountUserData, changeUsersMovies } from './handlers';\r\n\r\nconst initState: RootStoreT = {\r\n    movies: new Map(),\r\n    search: {\r\n        values: {\r\n            genre: '',\r\n            text: '',\r\n        },\r\n    },\r\n    user: {},\r\n};\r\n\r\nconst actionHandler = new Map<string, any>([\r\n    [MOUNT_MOVIES, mountMovies],\r\n    [CHANGE_FAV_MOVIE_STATUS, changeFavoriteMovie],\r\n    [CHANGE_MOVES_USER, changeUsersMovies],\r\n    [ADD_SEARCH, addSearchValues],\r\n    [MOUNT_USER_DATA, mountUserData],\r\n    [\r\n        'DEFAULT',\r\n        (state: RootStoreT) => {\r\n            console.warn('reducer DEFAULT');\r\n            return { ...state };\r\n        },\r\n    ],\r\n]);\r\n\r\nexport function rootReducer(state = initState, action: Action<any>) {\r\n    const reducer = actionHandler.has(action.type) ? actionHandler.get(action.type) : actionHandler.get('DEFAULT');\r\n    return reducer(state, action);\r\n}\r\n","export const mountMovies = (state: RootStoreT, action: { payload: MoviesT }) => {\r\n    return {\r\n        ...state,\r\n        movies: action.payload,\r\n    };\r\n};\r\n\r\nexport const changeFavoriteMovie = (state: RootStoreT, action: { payload: number }) => {\r\n    const movies = new Map(state.movies);\r\n    const targetMovie = movies.get(action.payload);\r\n\r\n    if (targetMovie) {\r\n        targetMovie.isFavorite = !targetMovie.isFavorite;\r\n        movies.set(action.payload, targetMovie);\r\n    }\r\n\r\n    return { ...state, movies };\r\n};\r\n\r\nexport const changeUsersMovies = (state: RootStoreT, action: { payload: number }) => {\r\n    const idMovie: any = action.payload;\r\n    const user = state.user;\r\n    const indexMovie = user.likes && user.likes.indexOf(idMovie);\r\n\r\n    if (indexMovie !== -1) {\r\n        user.likes.splice(indexMovie, 1);\r\n    } else {\r\n        user.likes.push(idMovie);\r\n    }\r\n\r\n    return { ...state, user };\r\n};\r\n\r\nexport const addSearchValues = (state: RootStoreT, action: { payload: { genre: string; text: string } }) => {\r\n    const allSearch = new Set(state.search.last || []);\r\n\r\n    allSearch.add(action.payload.text);\r\n\r\n    if (allSearch.size >= 6) {\r\n        const vals: any = Array.from(allSearch.values());\r\n        allSearch.delete(vals[0]);\r\n    }\r\n\r\n    return {\r\n        ...state,\r\n        search: {\r\n            values: { genre: action.payload.genre, text: action.payload.text },\r\n            last: Array.from(allSearch.values()),\r\n        },\r\n    };\r\n};\r\n\r\nexport const mountUserData = (state: RootStoreT, action: { payload: {} }) => {\r\n    return {\r\n        ...state,\r\n        user: action.payload,\r\n    };\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { toggleStatusFavorite } from '../redux-setup';\r\nimport { userFavoriteMovies } from '../movies/selectors';\r\n\r\nimport { BASE_URL } from '../api/constants';\r\n\r\nimport { Item } from '../movies/item';\r\n\r\nimport { Button, Typography, Grid } from '@material-ui/core';\r\nimport { Favorite as FavoriteIcon } from '@material-ui/icons';\r\nimport StarBorderRoundedIcon from '@material-ui/icons/StarBorderRounded';\r\n\r\nexport const Page = (props: any) => {\r\n    const dispatch = useDispatch();\r\n    const { posterPath, title, overview, id, isFavorite, voteAverage, voteCount, genres } = props;\r\n    const [disabledBtn, setDisabledBtn] = useState(false);\r\n    const favoriteMovies = useSelector<RootStoreT, Map<number, MovieT>>(userFavoriteMovies);\r\n\r\n    const onClickBtnFavorite = () => {\r\n        setDisabledBtn(true);\r\n        dispatch(toggleStatusFavorite(id, Boolean(isFavorite)));\r\n    };\r\n\r\n    useEffect(() => {\r\n        setDisabledBtn(false);\r\n    }, [isFavorite]);\r\n\r\n    return (\r\n        <div>\r\n            <Grid container alignItems='stretch' spacing={3}>\r\n                <Grid item xs={3}>\r\n                    <img src={`${BASE_URL}${posterPath}`} width='100%' alt={title} />\r\n                </Grid>\r\n                <Grid item xs={9}>\r\n                    <div>\r\n                        <Typography variant='h3' component='h1'>\r\n                            {title}\r\n                        </Typography>\r\n                    </div>\r\n                    <div>\r\n                        <p>\r\n                            <Button\r\n                                variant={isFavorite ? 'contained' : 'outlined'}\r\n                                color={isFavorite ? 'secondary' : 'default'}\r\n                                startIcon={<FavoriteIcon />}\r\n                                onClick={onClickBtnFavorite}\r\n                                disabled={disabledBtn}\r\n                            >\r\n                                {isFavorite ? 'In my list' : 'Add to my list'}\r\n                            </Button>\r\n                        </p>\r\n                        <p>\r\n                            <StarBorderRoundedIcon />\r\n                            {voteAverage} / 10 ({voteCount})\r\n                        </p>\r\n                        <p>{overview}</p>\r\n                        <p>{genres.map((genre: string) => `| ${genre} `)}|</p>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <div>\r\n                <Typography variant='h5' component='h2'>\r\n                    You Also might like\r\n                </Typography>\r\n                <Grid container alignItems='stretch' spacing={1}>\r\n                    {favoriteMovies &&\r\n                        Array.from(favoriteMovies.values()).map((item: any) => {\r\n                            return (\r\n                                <Grid item xs={6} sm={3} md={2} key={item.id}>\r\n                                    <Item {...item} isFavorite={true} />\r\n                                </Grid>\r\n                            );\r\n                        })}\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Typography, Grid } from '@material-ui/core';\r\n\r\nexport const Edit = () => {\r\n    return (\r\n        <div>\r\n            <Typography variant='h4' component='h1'>\r\n                My profile / <b> Edit</b>\r\n            </Typography>\r\n            <Grid container alignItems='stretch' spacing={1}>\r\n                <Grid item xs={12} md={3}>\r\n                    Фотка\r\n                </Grid>\r\n                <Grid item xs={12} md={9}>\r\n                    Настройки\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Button, Typography, Grid } from '@material-ui/core';\r\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\r\nimport { Link as RouterLink, useRouteMatch, Switch, Route } from 'react-router-dom';\r\nimport { Edit } from './edit';\r\n\r\nexport const UserPage = () => {\r\n    let { path, url } = useRouteMatch();\r\n\r\n    return (\r\n        <Switch>\r\n            <Route exact path={path}>\r\n                <Grid container alignItems='stretch' spacing={1}>\r\n                    <Grid item xs={12} md={9}>\r\n                        <Grid container item xs={12}>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant='h4' component='h1'>\r\n                                    My profile\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={3}>\r\n                                Фотка\r\n                            </Grid>\r\n                            <Grid item xs={12} md={9}>\r\n                                Настройки\r\n                                <Button\r\n                                    size='small'\r\n                                    endIcon={<EditRoundedIcon />}\r\n                                    component={RouterLink}\r\n                                    to={`${url}/edit`}\r\n                                >\r\n                                    Edit\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container item xs={12}>\r\n                            <Typography variant='h4' component='h2'>\r\n                                My List\r\n                            </Typography>\r\n                            You have XXX movies in your list\r\n                            <Button variant='outlined' component={RouterLink} to={`${url}/my-list`}>\r\n                                See All\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={3}>\r\n                        <Typography variant='h6' component='h3'>\r\n                            My activity\r\n                        </Typography>\r\n                        <div>карточка события</div>\r\n                        <div>карточка события</div>\r\n                        <div>карточка события</div>\r\n                    </Grid>\r\n                </Grid>\r\n            </Route>\r\n            <Route path={`${path}/edit`}>\r\n                <Edit />\r\n            </Route>\r\n            <Route path={`${path}/my-list`}>\r\n                <div>My List</div>\r\n            </Route>\r\n        </Switch>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { Container } from '@material-ui/core';\r\n\r\nimport { Footer, Header } from './components';\r\nimport { Movies } from './movies';\r\nimport { Movie } from './movie';\r\nimport { UserPage } from './user-page';\r\n\r\nconst App: React.FC = () => {\r\n    const allMovies = useSelector((store: RootStoreT) => store.movies);\r\n    const isUserAuth = true;\r\n    const favoriteMovies = useSelector((state: RootStoreT) => state.user.likes);\r\n\r\n    return (\r\n        <Router>\r\n            <Header />\r\n            <div className='App'>\r\n                <Container maxWidth='md'>\r\n                    <Switch>\r\n                        <Route exact path='/'>\r\n                            <Movies />\r\n                        </Route>\r\n\r\n                        <Route path='/login'>{isUserAuth ? <Redirect to='/user' /> : <div>login</div>}</Route>\r\n                        <Route path='/user'>{isUserAuth ? <UserPage /> : <Redirect to='/login' />}</Route>\r\n\r\n                        <Route\r\n                            path='/movie/:id'\r\n                            children={({ match }) => {\r\n                                if (match) {\r\n                                    const idMovie = Number(match.params.id);\r\n                                    return allMovies.has(idMovie) ? (\r\n                                        <Movie\r\n                                            {...allMovies.get(idMovie)}\r\n                                            isFavorite={favoriteMovies && favoriteMovies.includes(idMovie)}\r\n                                        />\r\n                                    ) : (\r\n                                        <div>такого фильма нет</div>\r\n                                    );\r\n                                }\r\n                            }}\r\n                        />\r\n\r\n                        <Route path='*'>\r\n                            {/* <NoMatch /> */}\r\n                            <div>404 | Тебя тут не должно быть</div>\r\n                        </Route>\r\n                    </Switch>\r\n                </Container>\r\n            </div>\r\n            <Footer />\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { TOKEN } from './constants';\r\n\r\nconst snakeToCamel = (str: string) => (str.includes('_') ? str.replace(/([-_]\\w)/g, g => g[1].toUpperCase()) : str);\r\n\r\nexport function convertInputMovie(entranceMovie: entranceMovieT): [number, {}] {\r\n    const newMovie: MovieT | any = Object.entries(entranceMovie).reduce(\r\n        (acc, [key, val]) => ({ ...acc, [snakeToCamel(key)]: val }),\r\n        {}\r\n    );\r\n\r\n    // FIX: \"\"genres\"\"\r\n    const unicGenres = new Set(newMovie.genres);\r\n    newMovie.genres = Array.from(unicGenres).map((it: any) => it.replace(/\"/g, ''));\r\n    return [entranceMovie.id, newMovie];\r\n}\r\n\r\nexport const createRequest = (url: string, method = 'GET', data = undefined) => {\r\n    return fetch(url, {\r\n        method,\r\n        body: data ? JSON.stringify(data) : null,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Basic ${TOKEN}`,\r\n        },\r\n    })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            if (typeof response.type === 'undefined') {\r\n                return response;\r\n            }\r\n            if (response.type === 'success') {\r\n                return response;\r\n            } else {\r\n                throw Error('err');\r\n            }\r\n        });\r\n};\r\n","import { MOVIES_URL, MOVIE_URL } from './constants';\r\nimport { createRequest, convertInputMovie } from './util';\r\n\r\nconst load = () =>\r\n    createRequest(MOVIES_URL).then(res => {\r\n        const movies = res.map(convertInputMovie);\r\n        return new Map(movies);\r\n    });\r\n\r\nconst addLike = (id: number) => createRequest(`${MOVIE_URL}${id}/like`, 'POST');\r\n\r\nconst removeLike = (id: number) => createRequest(`${MOVIE_URL}${id}/like`, 'DELETE');\r\n\r\nexport const apiMovies = {\r\n    load,\r\n    addLike,\r\n    removeLike,\r\n};\r\n","import { USER_URL } from './constants';\r\nimport { createRequest } from './util';\r\n\r\nexport const load = () => createRequest(USER_URL);\r\n\r\nexport const apiUser = {\r\n    load,\r\n};\r\n","import { all, fork, put, call, takeEvery } from 'redux-saga/effects';\r\nimport {\r\n    MOUNT_MOVIES,\r\n    MOUNT_USER_DATA,\r\n    CHANGE_FAV_MOVIE_STATUS,\r\n    SET_FAV_MOVIE_SAGA,\r\n    CHANGE_MOVES_USER,\r\n} from './action-types';\r\nimport { apiMovies, apiUser } from '../api';\r\n\r\nfunction* loadMovies() {\r\n    const data = yield call(apiMovies.load);\r\n    yield put({\r\n        type: MOUNT_MOVIES,\r\n        payload: data,\r\n    });\r\n}\r\n\r\nfunction* loadUserInfo() {\r\n    const data = yield call(apiUser.load);\r\n    yield put({\r\n        type: MOUNT_USER_DATA,\r\n        payload: data,\r\n    });\r\n}\r\n\r\nfunction* changeMoviesLikes(action: any) {\r\n    const { id, currentStatus } = action.payload;\r\n\r\n    const response = yield call(currentStatus ? apiMovies.removeLike : apiMovies.addLike, id);\r\n\r\n    if (response) {\r\n        yield put({\r\n            type: CHANGE_MOVES_USER,\r\n            payload: id,\r\n        });\r\n        yield put({\r\n            type: CHANGE_FAV_MOVIE_STATUS,\r\n            payload: id,\r\n        });\r\n    }\r\n}\r\n\r\nexport function* rootSaga() {\r\n    yield all([fork(loadUserInfo), fork(loadMovies)]);\r\n    yield takeEvery(SET_FAV_MOVIE_SAGA, changeMoviesLikes);\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { applyMiddleware, createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport logger from 'redux-logger';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { rootReducer } from './redux-setup/root-reducer';\r\nimport { rootSaga } from './redux-setup/root-saga';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = createStore(rootReducer, undefined, composeWithDevTools(applyMiddleware(logger, sagaMiddleware)));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n            <App />\r\n        </BrowserRouter>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}