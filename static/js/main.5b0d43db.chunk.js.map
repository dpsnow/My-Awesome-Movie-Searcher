{"version":3,"sources":["redux-setup/root-reducer.ts","redux-setup/action-types.ts","redux-setup/handlers.ts","movies/item.tsx","redux-setup/actions.ts","api.ts","constants.ts","movies/list.tsx","header/header.tsx","footer/footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initState","movies","Map","actionHandler","state","action","payload","targetMovie","get","isFav","set","useStyles","makeStyles","root","display","flexWrap","margin","expand","transform","expandOpen","Item","props","dispatch","useDispatch","title","overview","genres","posterPath","id","useState","expanded","setExpanded","classes","Card","CardMedia","style","height","image","CardHeader","titleTypographyProps","align","Divider","variant","CardContent","Box","className","map","genre","Chip","key","size","label","CardActions","disableSpacing","IconButton","onClick","type","changeStatusFavorite","color","Favorite","marginLeft","ExpandMore","Collapse","in","timeout","unmountOnExit","Typography","paragraph","allMovies","fetch","then","res","json","convertMovie","forEach","movie","newMovie","Object","entries","str","val","includes","replace","g","toUpperCase","convertInputMovie","value","List","useSelector","store","useEffect","api","getAllMovies","component","Grid","container","alignItems","spacing","values","item","xs","sm","md","Header","anchorEl","setAnchorEl","handleClose","Paper","Container","maxWidth","Switch","inputProps","flexShrink","FormControl","fullWidth","flexDirection","Select","MenuItem","Search","TextField","Button","aria-controls","aria-haspopup","event","currentTarget","AccountCircle","Menu","open","Boolean","onClose","Footer","marginTop","App","window","location","hostname","match","devTools","__REDUX_DEVTOOLS_EXTENSION__","a","createStore","reducer","has","compose","applyMiddleware","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5b0d43db.chunk.js","sourcesContent":["import { FETCH_MOVIES, SET_FAV_MOVIE } from './action-types';\r\nimport { fetchMovies, changeFavoriteMovie } from './handlers';\r\n\r\nconst initState: RootStoreT = { movies: new Map() };\r\n\r\nconst actionHandler = new Map<string, any>([\r\n    [FETCH_MOVIES, fetchMovies],\r\n    [SET_FAV_MOVIE, changeFavoriteMovie],\r\n    ['DEFAULT', () => initState],\r\n]);\r\n\r\nexport function rootReducer(state = initState, action: Action<any>) {\r\n    const reducer = actionHandler.has(action.type) ? actionHandler.get(action.type) : actionHandler.get('DEFAULT');\r\n    return reducer(state, action);\r\n}\r\n","export const FETCH_MOVIES = '@@APP/ROOT/FETCH_MOVIES';\r\nexport const SET_FAV_MOVIE = '@@APP/ROOT/SET_FAV_MOVIE';\r\n","export const fetchMovies = (state: RootStoreT, action: { payload: MoviesT }) => {\r\n    return {\r\n        ...state,\r\n        movies: action.payload,\r\n    };\r\n};\r\n\r\nexport const changeFavoriteMovie = (state: RootStoreT, action: { payload: number }) => {\r\n    const movies = new Map(state.movies);\r\n    const targetMovie = movies.get(action.payload);\r\n    if (targetMovie) {\r\n        targetMovie.isFav = !targetMovie.isFav;\r\n        movies.set(action.payload, targetMovie);\r\n    }\r\n    return { ...state, movies };\r\n};\r\n","import React, { useState } from 'react';\r\nimport {\r\n    Card,\r\n    Typography,\r\n    CardContent,\r\n    CardActions,\r\n    Box,\r\n    CardMedia,\r\n    CardHeader,\r\n    Chip,\r\n    Divider,\r\n    IconButton,\r\n    makeStyles,\r\n    Collapse,\r\n} from '@material-ui/core';\r\n\r\nimport { Favorite as FavoriteIcon, ExpandMore as ExpandMoreIcon } from '@material-ui/icons';\r\nimport { useDispatch } from 'react-redux';\r\nimport { changeStatusFavorite } from '../redux-setup/actions';\r\n\r\n// TODO: разобраться со стилями и вынести жанры в отдельный компонент\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        '& > *': {\r\n            margin: '2px',\r\n        },\r\n    },\r\n    expand: {\r\n        transform: 'rotate(0deg)',\r\n    },\r\n    expandOpen: {\r\n        transform: 'rotate(180deg)',\r\n    },\r\n});\r\n\r\nexport const Item = (props: ItemPropsT) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const { title, overview, genres, posterPath, id, isFav } = props;\r\n    const [expanded, setExpanded] = useState(false);\r\n\r\n    const onClickBtnExpand = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n    const onClickBtnFavorite = () => {\r\n        dispatch(changeStatusFavorite(id));\r\n    };\r\n\r\n    // при выносе из компонента получаю ошибку Error: Invalid hook call.\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card>\r\n            <CardMedia style={{ height: '400px' }} image={`https://devlab.website/${posterPath}`} />\r\n            <CardHeader title={title} titleTypographyProps={{ align: 'center' }} />\r\n            <Divider variant='middle' />\r\n            <CardContent>\r\n                <Box className={classes.root}>\r\n                    {genres.map((genre: string) => {\r\n                        return <Chip variant='outlined' key={genre} size='small' label={genre} />;\r\n                    })}\r\n                </Box>\r\n            </CardContent>\r\n            <CardActions disableSpacing>\r\n                <IconButton onClick={onClickBtnFavorite} color={isFav ? 'secondary' : 'default'}>\r\n                    <FavoriteIcon />\r\n                </IconButton>\r\n                <IconButton\r\n                    className={expanded ? classes.expandOpen : classes.expand}\r\n                    onClick={onClickBtnExpand}\r\n                    style={{ marginLeft: 'auto' }}\r\n                >\r\n                    <ExpandMoreIcon />\r\n                </IconButton>\r\n            </CardActions>\r\n            <Collapse in={expanded} timeout='auto' unmountOnExit>\r\n                <CardContent>\r\n                    <Typography paragraph>Overview:</Typography>\r\n                    <Typography paragraph>{overview}</Typography>\r\n                </CardContent>\r\n            </Collapse>\r\n        </Card>\r\n    );\r\n};\r\n","import { FETCH_MOVIES, SET_FAV_MOVIE } from './action-types';\r\n\r\nexport const getAllMovies = (movies: Map<number, MovieT>) => ({ type: FETCH_MOVIES, payload: movies });\r\n\r\nexport const changeStatusFavorite = (id: number) => ({ type: SET_FAV_MOVIE, payload: id });\r\n","import { MOVIES_URL } from './constants';\r\n\r\nconst snakeToCamel = (str: string) => (str.includes('_') ? str.replace(/([-_]\\w)/g, g => g[1].toUpperCase()) : str);\r\n\r\nfunction convertInputMovie(movie: entranceMovieT): [number, {}] {\r\n    const newMovie: any = {};\r\n    Object.entries(movie).map(([key, val]) => (newMovie[snakeToCamel(key)] = val));\r\n    return [movie.id, newMovie];\r\n}\r\n\r\nexport const allMovies = (): Promise<any> =>\r\n    fetch(MOVIES_URL)\r\n        .then(res => res.json())\r\n        .then(movies => {\r\n            const convertMovie = new Map();\r\n            movies.forEach((movie: any) => {\r\n                const [id, value] = convertInputMovie(movie);\r\n                convertMovie.set(id, value);\r\n            });\r\n            return convertMovie;\r\n        });\r\n","export const MOVIES_URL:string = 'https://devlab.website/v1/movies';","import React, { useEffect } from 'react';\r\nimport { Item } from './item';\r\nimport { Typography, Grid } from '@material-ui/core';\r\nimport * as api from '../api';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { getAllMovies } from '../redux-setup';\r\n\r\nexport const List = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const allMovies = useSelector<RootStoreT, any>(store => store.movies);\r\n\r\n    useEffect(() => {\r\n        api.allMovies().then((movies: MoviesT) => {\r\n            dispatch(getAllMovies(movies));\r\n        });\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <>\r\n            <Typography variant='h3' component='h1'>\r\n                Movies\r\n            </Typography>\r\n            <Grid container alignItems='stretch' spacing={1}>\r\n                {allMovies &&\r\n                    [...allMovies.values()].map((item: MovieT) => {\r\n                        return (\r\n                            <Grid item xs={12} sm={6} md={4} key={item.id}>\r\n                                {/* TODO: исправить септку после стилизации под макет */}\r\n                                {/* <Grid item xs={6} sm={3} md={2} key={item.id}> */}\r\n                                <Item {...item} />\r\n                            </Grid>\r\n                        );\r\n                    })}\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport {\r\n    Container,\r\n    Grid,\r\n    Paper,\r\n    Typography,\r\n    Box,\r\n    Switch,\r\n    FormControl,\r\n    MenuItem,\r\n    Select,\r\n    Menu,\r\n    Button,\r\n    TextField,\r\n} from '@material-ui/core';\r\n\r\nimport { Search as SearchIcon, AccountCircle } from '@material-ui/icons';\r\n\r\nexport const Header = () => {\r\n    // TODO: WIP\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <Paper>\r\n            <Container maxWidth='md'>\r\n                <Grid container spacing={1}>\r\n                    <Grid item>\r\n                        <span>Realise Calendar</span>\r\n                        <span>My List</span>\r\n                        <span>Coming soon</span>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography>\r\n                            <Switch value='checkedC' inputProps={{ 'aria-label': 'primary checkbox' }} />\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={2}>\r\n                        <Typography variant='h6'>Лого</Typography>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Box flexShrink={1}>\r\n                            <FormControl fullWidth size={'small'} style={{ display: 'flex', flexDirection: 'row' }}>\r\n                                <Select id='select' value={10}>\r\n                                    <MenuItem value={10}>All</MenuItem>\r\n                                    <MenuItem value={20}>ne all</MenuItem>\r\n                                    <MenuItem value={30}>one</MenuItem>\r\n                                </Select>\r\n                                <SearchIcon />\r\n                                <TextField id='outlined-basic' label='Search…' variant='outlined' size='small' />\r\n                            </FormControl>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Button aria-controls='user-menu' aria-haspopup='true' onClick={handleClick}>\r\n                            <AccountCircle />\r\n                            Vasya21\r\n                        </Button>\r\n                        <Menu id='user-menu' anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={handleClose}>\r\n                            <MenuItem onClick={handleClose}>Profile</MenuItem>\r\n                            <MenuItem onClick={handleClose}>Settings</MenuItem>\r\n                            <MenuItem onClick={handleClose}>Logout</MenuItem>\r\n                        </Menu>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </Paper>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Container, Grid, Divider, Box } from '@material-ui/core';\r\n\r\nexport const Footer = () => {\r\n    return (\r\n        <Container maxWidth='md' style={{ marginTop: '60px' }}>\r\n            <Divider variant='fullWidth' />\r\n            <Grid container spacing={1}>\r\n                <Box>footer</Box>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { List as Movies } from './movies/list';\r\n\r\nimport { Container } from '@material-ui/core';\r\nimport { Header } from './header/header';\r\nimport { Footer } from './footer/footer';\r\n\r\nconst App: React.FC = () => {\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className='App'>\r\n                <Container maxWidth='md'>\r\n                    <Movies />\r\n                </Container>\r\n            </div>\r\n            <Footer />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { applyMiddleware, createStore, compose } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport { rootReducer } from './redux-setup/root-reducer';\r\nimport logger from 'redux-logger';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst devTools =\r\n    typeof (window as any).__REDUX_DEVTOOLS_EXTENSION__ === 'undefined'\r\n        ? (a: any) => a\r\n        : (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__();\r\n\r\nconst store = createStore(rootReducer, compose(applyMiddleware(logger), devTools));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}