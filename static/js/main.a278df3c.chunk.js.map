{"version":3,"sources":["movies/item.tsx","movies/list.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","root","display","flexWrap","margin","renderGenres","genre","Chip","variant","key","size","label","Item","props","max","title","overview","genres","useState","expanded","setExpanded","isFavorite","setFavorite","classes","Card","CardMedia","style","height","image","Math","floor","random","CardHeader","titleTypographyProps","align","Divider","CardContent","Box","className","map","CardActions","disableSpacing","IconButton","onClick","color","Favorite","marginLeft","ExpandMore","Collapse","in","timeout","unmountOnExit","Typography","paragraph","renderMovies","item","Grid","xs","id","List","React","movies","setMovies","useEffect","length","fetch","then","res","json","catch","err","component","container","alignItems","spacing","App","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kXAuBA,IAAMA,EAAYC,YAAW,CACzBC,KAAM,CACFC,QAAS,OACTC,SAAU,OACV,QAAS,CACLC,OAAQ,UAKdC,EAAe,SAACC,GAClB,OAAO,kBAACC,EAAA,EAAD,CAAMC,QAAQ,WAAWC,IAAKH,EAAOI,KAAK,QAAQC,MAAOL,KAGvDM,EAAO,SAACC,GAAuB,IAnBtBC,EAoBVC,EAA4BF,EAA5BE,MAAOC,EAAqBH,EAArBG,SAAUC,EAAWJ,EAAXI,OADc,EAGPC,oBAAS,GAHF,mBAGhCC,EAHgC,KAGtBC,EAHsB,OAILF,oBAAS,GAJJ,mBAIhCG,EAJgC,KAIpBC,EAJoB,KAcjCC,EAAUxB,IAEhB,OACI,kBAACyB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWC,MAAO,CAAEC,OAAQ,SAAWC,MAAK,oCArClCd,EAqC6E,IApCxFe,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMhB,KAoCO,cAC5C,kBAACkB,EAAA,EAAD,CAAYjB,MAAOA,EAAOkB,qBAAsB,CAAEC,MAAO,YACzD,kBAACC,EAAA,EAAD,CAAS3B,QAAQ,WACjB,kBAAC4B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,UAAWf,EAAQtB,MAAOgB,EAAOsB,IAAIlC,KAE9C,kBAACmC,EAAA,EAAD,CAAaC,gBAAc,GACvB,kBAACC,EAAA,EAAD,CAAYC,QAfG,WACvBrB,GAAaD,IAcoCuB,MAAOvB,EAAa,YAAc,WACvE,kBAACwB,EAAA,EAAD,OAEJ,kBAACH,EAAA,EAAD,CAAYC,QAtBC,WACrBvB,GAAaD,IAqBkCO,MAAO,CAAEoB,WAAY,SACxD,kBAACC,EAAA,EAAD,QAGR,kBAACC,EAAA,EAAD,CAAUC,GAAI9B,EAAU+B,QAAQ,OAAOC,eAAa,GAChD,kBAACf,EAAA,EAAD,KACI,kBAACgB,EAAA,EAAD,CAAYC,WAAS,GAArB,aACA,kBAACD,EAAA,EAAD,CAAYC,WAAS,GAAErC,O,QCpErCsC,EAAe,SAACC,GAClB,OACI,kBAACC,EAAA,EAAD,CAAMD,MAAI,EAACE,GAAI,EAAGhD,IAAK8C,EAAKG,IACxB,kBAAC,EAAD,CAAM3C,MAAOwC,EAAKxC,MAAOC,SAAUuC,EAAKvC,SAAUC,OAAQsC,EAAKtC,WAK9D0C,EAAO,WAAO,IAAD,EACMC,IAAM1C,SAAS,IADrB,mBACf2C,EADe,KACPC,EADO,KAiBtB,OAdAC,qBAAU,WACgB,IAAlBF,EAAOG,QACPC,MAAM,oCACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAL,GAEFC,EAAUD,MAEbQ,OAAM,SAAAC,SAIhB,CAACT,IAGA,oCACI,kBAACT,EAAA,EAAD,CAAY5C,QAAQ,KAAK+D,UAAU,MAAnC,UAGA,kBAACf,EAAA,EAAD,CAAMgB,WAAS,EAACC,WAAW,UAAUC,QAAS,GACzCb,EAAOtB,IAAIe,M,QCpBbqB,EAVO,WAClB,OACI,yBAAKrC,UAAU,OACX,kBAACsC,EAAA,EAAD,CAAWC,SAAS,MAChB,kBAAC,EAAD,SCGIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.a278df3c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n    Card,\r\n    Typography,\r\n    CardContent,\r\n    CardActions,\r\n    Box,\r\n    CardMedia,\r\n    CardHeader,\r\n    Chip,\r\n    Divider,\r\n    IconButton,\r\n    makeStyles,\r\n    Collapse,\r\n} from '@material-ui/core';\r\n\r\nimport { Favorite as FavoriteIcon, ExpandMore as ExpandMoreIcon } from '@material-ui/icons';\r\n\r\nfunction getRandomInt(max: number): number {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\n// TODO: разобраться со стилями и вынести жанры в отдельный компонент\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        '& > *': {\r\n            margin: '2px',\r\n        },\r\n    },\r\n});\r\n\r\nconst renderGenres = (genre: string) => {\r\n    return <Chip variant='outlined' key={genre} size='small' label={genre} />;\r\n};\r\n\r\nexport const Item = (props: ItemPropsT) => {\r\n    const { title, overview, genres } = props;\r\n\r\n    const [expanded, setExpanded] = useState(false);\r\n    const [isFavorite, setFavorite] = useState(false);\r\n\r\n    const onClickBtnExpand = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n    const onClickBtnFavorite = () => {\r\n        setFavorite(!isFavorite);\r\n    };\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card>\r\n            <CardMedia style={{ height: '300px' }} image={`https://picsum.photos/id/${getRandomInt(500)}/200/300`} />\r\n            <CardHeader title={title} titleTypographyProps={{ align: 'center' }} />\r\n            <Divider variant='middle' />\r\n            <CardContent>\r\n                <Box className={classes.root}>{genres.map(renderGenres)}</Box>\r\n            </CardContent>\r\n            <CardActions disableSpacing>\r\n                <IconButton onClick={onClickBtnFavorite} color={isFavorite ? 'secondary' : 'default'}>\r\n                    <FavoriteIcon />\r\n                </IconButton>\r\n                <IconButton onClick={onClickBtnExpand} style={{ marginLeft: 'auto' }}>\r\n                    <ExpandMoreIcon />\r\n                </IconButton>\r\n            </CardActions>\r\n            <Collapse in={expanded} timeout='auto' unmountOnExit>\r\n                <CardContent>\r\n                    <Typography paragraph>Overview:</Typography>\r\n                    <Typography paragraph>{overview}</Typography>\r\n                </CardContent>\r\n            </Collapse>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { Item } from './item';\r\nimport { Typography, Grid } from '@material-ui/core';\r\n\r\nconst renderMovies = (item: ItemPropsT) => {\r\n    return (\r\n        <Grid item xs={4} key={item.id}>\r\n            <Item title={item.title} overview={item.overview} genres={item.genres} />\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport const List = () => {\r\n    const [movies, setMovies] = React.useState([]);\r\n\r\n    useEffect(() => {\r\n        if (movies.length === 0) {\r\n            fetch('https://devlab.website/v1/movies')\r\n                .then(res => res.json())\r\n                .then(movies => {\r\n                    // console.log('movies', movies);\r\n                    setMovies(movies);\r\n                })\r\n                .catch(err => {\r\n                    // console.log('err', err);\r\n                });\r\n        }\r\n    }, [movies]);\r\n\r\n    return (\r\n        <>\r\n            <Typography variant='h3' component='h1'>\r\n                Movies\r\n            </Typography>\r\n            <Grid container alignItems='stretch' spacing={3}>\r\n                {movies.map(renderMovies)}\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { List as Movies } from './movies/list';\r\n\r\nimport { Container } from '@material-ui/core';\r\n\r\nconst App: React.FC = () => {\r\n    return (\r\n        <div className='App'>\r\n            <Container maxWidth='md'>\r\n                <Movies />\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}